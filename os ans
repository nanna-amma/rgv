1 a fcfs

#include<stdio.h>
void main()
{
 int wt[20]={0},bt[20]={0},tat[20]={0},n,i,swt=0,stat=0;
 float awt,atat;
 printf("Enter the no of processes:");
 scanf("%d",&n);
 printf("Enter the burst times: ");
 for(i=0;i<n;i++)
 {
 scanf("%d",&bt[i]);
 }
 wt[0]=0;
 for(i=1;i<n;i++)
 {
 wt[i]=bt[i-1]+wt[i-1];
 }
 for(i=0;i<n;i++)
 {
 tat[i]=wt[i]+bt[i];
 }
 for(i=0;i<n;i++)
 {
 swt=swt+wt[i];
 }
 awt=swt/n;
 for(i=0;i<n;i++)
 {
 stat=stat+tat[i];
 }
 atat=stat/n;
 printf("Process\tBT\tWT\tTAT");
 printf("\n-----------------------------------");
 for(i=0;i<n;i++)
 {
 }
 printf("\n P%d \t%d\t%d \t%d",i+1,bt[i], wt[i], tat[i]);
 printf("\n-----------------------------------");
 printf("\t(ATAT)%f \t(AWT)%f\n",atat,awt);
 printf("-----------------------------------");
 }


 1 b SJF


  #include<stdio.h>
 void main()
 {
int wt[20] ={0}, bt[20]={0}, tat[20]={0}, i, swt=0, stat=0, max, j,
 n, p[20],m;
 float awt,atat;
 printf("Enter the no of processes:");
 scanf("%d",&n);
 printf("Enter the burst times: ");
 for(i=0;i<n;i++)
 {
 scanf("%d",&bt[i]);
 }
 printf("Enter the processes number: ");
 for(i=0;i<n;i++)
 {
 }
 {
 scanf("%d",&p[i]);
 for(i=0;i<n;i++)
 for(j=i+1;j<n;j++)
 {
 if(bt[i]>bt[j])
 {
 max=bt[i];
 m=p[i];
 bt[i]=bt[j];
 p[i]=p[j];
 bt[j]=max;
 p[j]=m;
 }
 }
 }
 wt[0]=0;
 for(i=1;i<n;i++)
 {
 wt[i]=bt[i-1]+wt[i-1];
 }
 {
 }
 for(i=0;i<n;i++)
 tat[i]=wt[i]+bt[i];
 for(i=0;i<n;i++)
 {
 swt=swt+wt[i];
 stat=stat+tat[i];
 }
 awt=swt/n;
 atat=stat/n;
 printf("Process\tBT\tWT\tTAT");
printf("\n-----------------------------------");
 for(i=0;i<n;i++)
 {
 printf("\n %d \t%d\t%d \t%d",p[i],bt[i], wt[i], tat[i]);
 }
 printf("\n-----------------------------------");
 printf("\n
 \t(ATAT)%f %f(AWT)\n",atat,awt);
 printf("-----------------------------------");
 }


 1 c Round Robin


  #include<stdio.h>
void main()
 {
 int p[20],bt[20]={0},tat[20]={0},wt[20]={0},i,temp=0,ct[20]={0},max,stat=0,swt=0,n,tmslc,j;
 float awt, atat;
 printf("Enter the no of processes:");
 scanf("%d",&n);
 printf("Enter the processes number:");
 for(i=0;i<n;i++)
 {
 }
 scanf("%d",&p[i]);
 printf("Enter the burst times:");
 for(i=0;i<n;i++)
 {
 }
 scanf("%d",&bt[i]);
 ct[i]=bt[i];
 printf("Enter the tmslc:");
 scanf("%d",&tmslc);
 max=bt[0];
 for(i=1;i<n;i++)
 {
 }
 if(max<bt[i])
 max=bt[i];
 for(j=0;j<(max/tmslc)+1;j++)
 {
 for(i=0;i<n;i++)
{
 if(bt[i]!=0)
 {
 }
 }
 }
 if(bt[i]<=tmslc)
 {
 }
 else
 {
 }
 for(i=0;i<n;i++)
 {
 tat[i]=temp+bt[i];
 temp=temp+bt[i];
 bt[i]=0;
 bt[i]=bt[i]-tmslc;
 temp=temp+tmslc;
 wt[i]=tat[i]-ct[i];
 stat+=tat[i];
 swt+=wt[i];
 }
 atat=(float)stat/n;
 awt=(float)swt/n;
 printf("Process\tBT\tWT\tTAT");
 printf("\n---------------------------------------");
 for(i=0;i<n;i++)
{
 printf("\n P%d \t%d\t%d \t%d",p[i],ct[i],wt[i],tat[i]);
 }
 printf("\n---------------------------------------");
 printf("\n \t(AWT)%f %f(ATAT)\n",awt,atat);
 printf("\n---------------------------------------");
 }


 1 d  Priority:


 #include<stdio.h>
 void main()
 {
 int wt[20]={0},bt[20]={0},tat[20]={0},prty[20]={0},i,swt=0,stat=0,max,j,n,m,p[20],x;
 float awt,atat;
 printf("Enter the no. of processes:");
scanf("%d",&n);
 printf("Enter the burst times:");
 for(i=0;i<n;i++)
 {
 }
 scanf("%d",&bt[i]);
 printf("\nEnter the priorities:");
 for(i=0;i<n;i++)
 {
 }
 scanf("%d",&prty[i]);
 printf("Enter the processes number:");
 for(i=0;i<n;i++)
 {
 }
 scanf("%d",&p[i]);
 for(i=0;i<n;i++)
 {
 for(j=i+1;j<n;j++)
 {
 if(prty[i]>prty[j])
 {
 max=prty[i];
 prty[i]=prty[j];
 prty[j]=max;
 m=p[i];
 p[i]=p[j];
p[j]=m;
 x=bt[i];
 bt[i]=bt[j];
 bt[j]=x;
 }
 }
 }
 wt[0]=0;
 for(i=1;i<n;i++)
 {
 }
 wt[i]=bt[i-1]+wt[i-1];
 for(i=0;i<n;i++)
 {
 }
 tat[i]=wt[i]+bt[i];
 for(i=1;i<n;i++)
 {
 }
 {
 }
 wt[i]=bt[i-1]+wt[i-1];
 tat[i]=wt[i]+bt[i];
 for(i=0;i<n;i++)
 swt=swt+wt[i];
 stat=stat+tat[i];
 awt=swt/n;
 atat=stat/n;
printf("Process\tBT\tWT\tTAT");
 printf("\n---------------------------------------");
 for(i=0;i<n;i++)
 {
 }
 printf("\n P%d \t%d\t%d \t%d",p[i],bt[i],wt[i],tat[i]);
 printf("\n---------------------------------------");
 printf("\n \t(AWT)%f %f(ATAT)\n",awt,atat);
 printf("\n---------------------------------------");
 }




 2 ans
a) Openandwrite
 #include<sys/types.h>
 #include<sys/stat.h>
 #include<fcntl.h>
 #include<unistd.h>
 #include<stdio.h>
 void main()
 {
 int fd;
 fd=creat("n1",0666);
 if(fd!=-1)
 {
 fd=open("n1",O_WRONLY);
 if(fd==-1)
 {
 }
 printf("Cannot open file");
 write(fd,"This is OS Program",20);
 close(fd);
 }
 }


b) Openandread
 #include<sys/types.h>
 #include<sys/stat.h>
 #include<fcntl.h>
 #include<unistd.h>
 #include<stdio.h>
 void main()
 {
 int fd,n=1;
 char buf;
 fd=open("opening.c",O_RDONLY);
 if(fd==-1)
 {
 }
 printf("File doesnot exist");
 while(n>0)
 {
 n=read(fd,&buf,1);
 printf("%c",buf);
 }
 }
 

c) Opendir and readdir
 #include<stdio.h>
 #include<dirent.h>
 void main(int argc,char **argv)
 {
 DIR *dp;
 struct dirent *link;
 dp=opendir(argv[1]);
 printf("Contents of the directory %s are \n",argv[1]);
 while((link=readdir(dp))!=0)
 {
 printf("%s\n",link->d_name);
 }
 closedir(dp);
 }


 d) Stat
 #include<sys/types.h>
 #include<sys/stat.h>
 #include<fcntl.h>
 #include<unistd.h>
 #include<stdio.h>
 void main()
 {
 struct stat fs;
 if(stat("opening.c",&fs)==-1)
 {
 }
 printf("Error in stat system call");
 printf("No of links: %ld\n",fs.st_nlink);
 printf("Filesize: %ld bytes\n",fs.st_size);
 printf("File in ode: %ld\n",fs.st_ino);
 }


e) seek_set
 #include<fcntl.h>
 #include<unistd.h>
 #include<sys/stat.h>
 #include<stdio.h>
 void main()
 {
 }
 char buf;
 int fd=open("opening.c",O_RDONLY);
 lseek(fd,5,SEEK_SET);
 read(fd,&buf,1);
 printf("The char at offset 5=%c\n",buf);
 close(fd);


 f) seek_cur
 #include<sys/types.h>
 #include<fcntl.h>
 #include<unistd.h>
 #include<sys/stat.h>
 #include<stdio.h>
 void main()
 {
 char buf;
 int fd=open("opening.c",O_RDONLY);
 lseek(fd,-5,SEEK_CUR);
 read(fd,&buf,1);
 printf("The char at offset 5=%c\n",buf);
close(fd);
 }




 3 ans
 #include<stdio.h>
 struct file
 {
 };
 int all[10];
 int max[10];
 int need[10];
 int flag;
 void main()
 {
 struct file f[10];
 int fl;
 int i,j,k,p,b,n,r,g,cnt=0,id,newr;
 int avail[10],seq[10];
 printf("Enter the no of processes--");
 scanf("%d",&n);
 printf("Enter the no of resources");
 scanf("%d",&r);
 for(i=0;i<n;i++)
 {
 printf("Enter the details for P%d\n",i);
 printf("Enter the allocation : ");
 for(j=0;j<r;j++)
 scanf("%d",&f[i].all[j]);
 printf("Enter the max: ");
for(j=0;j<r;j++)
 scanf("%d",&f[i].max[j]);
 f[i].flag=0;
 }
 printf("\nEnter Available resources--\t");
 for(i=0;i<r;i++)
 scanf("%d",&avail[i]);
 printf("\nEnter new Request details--");
 printf("\nEnter the pid\t--");
 scanf("%d",&id);
 printf("\nEnter the request for resources--\t");
 for(i=0;i<r;i++)
 {
 }
 scanf("%d",&newr);
 f[id].all[i]+=newr;
 avail[i]=avail[i]-newr;
 for(i=0;i<n;i++)
 {
 }
 cnt=0;
 fl=0;
 for(j=0;j<r;j++)
 {
 }
 f[i].need[j]=f[i].max[j]-f[i].all[j];
 if(f[i].need[j]<0)
 f[i].need[j]=0;
 while(cnt!=n)
{
 g=0;
 for(j=0;j<n;j++)
 {
 if(f[j].flag==0)
 {
 b=0;
 for(p=0;p<r;p++)
 {
 }
 if(b==r)
 {
 }
 if(avail[p]>=f[j].need[p])
 b=b+1;
 else
 b=b-1;
 printf("\nP%d is visited",j);
 seq[fl++]=j;
 f[j].flag=1;
 for(k=0;k<r;k++)
 avail[k]=avail[k]+f[j].all[k];
 cnt=cnt+1;
 printf("(");
 for(k=0;k<r;k++)
 printf("%3d",avail[k]);
 printf(")");
 g=1;
 }
}
 if(g==0)
 {
 }
 }
 printf("\nREQUEST NOT GRANTED__DEADLOCK OCCURRED");
 printf("\nSYTEM IS IN UNSAFE STATE");
 goto y;
 printf("\nSYSTEM IS IN SAFE STATE");
 printf("\nThe safe sequence is __(");
 for(i=0;i<fl;i++)
 printf("P%d\t",seq[i]);
 printf(")");
 y:printf("\nProcess\t\tAllocation\t Max\t\t Need\n");
 for(i=0;i<n;i++)
 {
 printf("P%d\t",i);
 for(j=0;j<r;j++)
 printf("%6d",f[i].all[j]);
 for(j=0;j<r;j++)
 printf("%6d",f[i].max[j]);
 for(j=0;j<r;j++)
 printf("%6d",f[i].need[j]);
 printf("\n");
 }
 }





 4 ans
 # define BUFFERSIZE 10;
 int mutex, n, empty, full=0,item, item1;
 int buffer[20];
 int in=0,out=0,mutex=1;
 void wait(int s)
 {
 while(s<0)
 {
 printf("\ Cannot add an item \n");
 exit(0);
 }
 s--;
 }
 void signal(int s)
 {
s++;
 }
 void producer()
 {
 do{
 }
 wait ( empty );
 wait ( mutex );
 printf("\n Producer produces an item:");
 scanf("%d", &item);
 buffer[in]=item;
 in=in+1;
 signal(mutex);
 signal(full);
 while(in<n);
 }
void cosumer()
 {
 do{
 }
 wait(full);
 wait(mutex);
 item1=buffer[out];
 printf("\n Consumed item = %d",item1);
 out = out+1;
 signal(mutex);
 signal(mutex);
 while(out<n);
 }
 void main(){
 printf("\n Enter the value of n :");
 scanf("%d",&n) ;
empty = n;
 while(in<n)
 producer();
 while(in!=out)
 cosumer();
 }




 5 ans
 a) Paging
  #include<stdio.h>
 #include<conio.h>
 void main()
 {
 int ms, ps, nop, np, rempages, i, j, x, y, pa, offset;
 int s[10], fno[10][20];
 //clrscr();
 printf("\nEnter the memory size-- ");
 scanf("%d",&ms);
printf("\nEnter the page size-- ");
 scanf("%d",&ps);
 nop = ms/ps;
 printf("\nThe no. of pages available in memory are-- %d ",nop);
 printf("\nEnter number of processes-- ");
 scanf("%d",&np);
 rempages = nop;
 for(i=1;i<=np;i++)
 {
 printf("\nEnter no. of pages required for p[%d]-- ",i);
 scanf("%d",&s[i]);
 if(s[i] >rempages)
 {
 printf("\nMemory is Full");
 break;
 }
 rempages = rempages- s[i];
 printf("\nEnter pagetable for p[%d]--- ",i);
 for(j=0;j<s[i];j++)
 scanf("%d",&fno[i][j]);
}
 printf("\nEnter Logical Address to find Physical Address ");
 printf("\nEnter process no. and pagenumber and offset-- ");
 scanf("%d %d %d",&x,&y, &offset);
 if(x>np || y>=s[i] || offset>=ps)
 printf("\nInvalid Process or Page Number or offset");
 else
 { pa=fno[x][y]*ps+offset;
 printf("\nThe Physical Address is-- %d",pa);
 }
 getch();
 }



  b) Segmentation
   #include <stdio.h>
 #include <math.h>
 int sost;
 void gstinfo();
 void ptladdr();
 struct segtab
 {
int sno;
 int baddr;
 int limit;
 int val[10];
 }st[10];
 void gstinfo()
 {
 int i,j;
 printf("\n\tEnter the size of the segment table: ");
 scanf("%d",&sost);
 for(i=1;i<=sost;i++)
 {
 printf("\n\tEnter the information about segment: %d",i);
 st[i].sno = i;
 printf("\n\tEnter the base Address: ");
 scanf("%d",&st[i].baddr);
 printf("\n\tEnter the Limit: ");
 scanf("%d",&st[i].limit);
 for(j=0;j<st[i].limit;j++)
 {
 printf("Enter the %d address Value: ",(st[i].baddr + j));
 scanf("%d",&st[i].val[j]);
 }
 }
 }
 void ptladdr()
 {
 int i,swd,d=0,n,s,disp,paddr;
//clrscr();
 printf("\n\n\t\t\t SEGMENT TABLE \n\n");
 printf("\n\t\t SEG.NO\t\tBASE ADDRESS\t\t LIMIT \n\n");
 for(i=1;i<=sost;i++)
 printf("\t\t%d \t\t%d\t\t%d\n\n",st[i].sno,st[i].baddr,st[i].limit);
 printf("\n\nEnter the logical Address: ");
 scanf("%d",&swd);
 n=swd;
 while (n != 0)
 {
 n=n/10;
 d++;
 }
 s = swd/pow(10,d-1);
 disp = swd%(int)pow(10,d-1);
 if(s<=sost)
 {
 if(disp < st[s].limit)
 {
 paddr = st[s].baddr + disp;
 printf("\n\t\tLogical Address is: %d",swd);
 printf("\n\t\tMapped Physical address is: %d",paddr);
 printf("\n\tThe value is: %d",( st[s].val[disp] ) );
 }
 else
 printf("\n\t\tLimit of segment %d is high\n\n",s);
 }
 else
printf("\n\t\tInvalid Segment Address \n");
 }
 void main()
 {
 char ch;
 //clrscr();
 gstinfo();
 do
 {
 ptladdr();
 printf("\n\t Do U want to Continue(Y/N)");
 //flushall();
 scanf("%c",&ch);
 }while (ch == 'Y' || ch == 'y' );
 //getch();
 }





 6 ans
 a) FIFO
  #include<stdio.h>
 #include<conio.h>
 int fsize;
 int frm[15];
 void display();
 void main()
 {
 int pg[100],nPage,i,j,pf=0,top=-1,temp,flag=0;
 // clrscr();
 printf("\n Enter frame size:");
 scanf("%d",&fsize);
 printf("\n Enter number of pages:");
 scanf("%d",&nPage);
 for(i=0;i< nPage;i++)
 {
 printf("\n Enter page[%d]:",i+1);
 scanf("%d",&pg[i]);
 }
 for(i=0;i< fsize;i++)
frm[i]=-1;
 printf("\n page | \t Frame content ");
 printf("\n--------------------------------------");
 for(j=0;j< nPage;j++)
 {
 flag=0;
 for(i=0;i< fsize;i++)
 {
 if(frm[i]==pg[j])
 {
 flag=1;
 break;
 }
 }
 if(flag==0)
 {
 if(top==fsize-1)
 {
 top=-1;
 }
 pf++;
 top++;
 frm[top]=pg[j];
 }
printf("\n %d    |",pg[j]);
 display();
 }
 printf("\n--------------------------------------");
 printf("\n total page fault:%d",pf);
 getch();
 }
 void display()
 {
 int i;
 for(i=0;i< fsize;i++)
 printf("\t %d",frm[i]);
 }


 b) LRU
 #include<stdio.h>
 main()
 {
 int q[20],p[50],c=0,c1,d,f,i,j,k=0,n,r,t,b[20],c2[20];
 printf("Enter no of pages:");
 scanf("%d",&n);
 printf("Enter the reference string:");
 for(i=0;i<n;i++)
 scanf("%d",&p[i]);
 printf("Enter no of frames:");
 scanf("%d",&f);
 q[k]=p[k];
 printf("\n\t%d\n",q[k]);
 c++;
 k++;
 for(i=1;i<n;i++)
 {
 c1=0;
 for(j=0;j<f;j++)
 {
 if(p[i]!=q[j])
 c1++;
                        }
                        if(c1==f)
                        {
                                    c++;
                                    if(k<f)
                                    {
                                                q[k]=p[i];
                                                k++;
                                                for(j=0;j<k;j++)
                                                printf("\t%d",q[j]);
                                                printf("\n");
                                    }
                                    else
                                    {
                                                for(r=0;r<f;r++)
                                                {
                                                            c2[r]=0;
                                                            for(j=i-1;j<n;j--)
                                                            {
                                                            if(q[r]!=p[j])
                                                            c2[r]++;
                                                            else
                                                            break;
                                                }
                                    }
                                    for(r=0;r<f;r++)
                                     b[r]=c2[r];
                                    for(r=0;r<f;r++)
                                    {
                                                for(j=r;j<f;j++)
                                                {
                                                            if(b[r]<b[j])
                                                            {
                                                                        t=b[r];
                                                                        b[r]=b[j];
                                                                        b[j]=t;
                                                            }
                                                }
                                    }
                                    for(r=0;r<f;r++)
                                    {
                                                if(c2[r]==b[0])
                                                q[r]=p[i];
                                                printf("\t%d",q[r]);
                                    }
                                    printf("\n");
                        }
            }
 }
 printf("\nThe no of page faults is %d",c);
}



C) Optimal
 #include<stdio.h>
 int main()
 {
 int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, flag2, flag3, i, j, k, 
pos, max, faults = 0;
 printf("Enter number of frames: ");
 scanf("%d", &no_of_frames);
 printf("Enter number of pages: ");
 scanf("%d", &no_of_pages);
 printf("Enter page reference string: ");
 for(i = 0; i < no_of_pages; ++i){
 scanf("%d", &pages[i]);
 }
 for(i = 0; i < no_of_frames; ++i){
 frames[i] = -1;
 }
 for(i = 0; i < no_of_pages; ++i){
 flag1 = flag2 = 0;
        for(j = 0; j < no_of_frames; ++j){
            if(frames[j] == pages[i]){
                   flag1 = flag2 = 1;
                   break;
               }
        }
        
        if(flag1 == 0){
            for(j = 0; j < no_of_frames; ++j){
                if(frames[j] == -1){
                    faults++;
                    frames[j] = pages[i];
                    flag2 = 1;
                    break;
                }
            }    
        }
        
        if(flag2 == 0){
        flag3 =0;
        
            for(j = 0; j < no_of_frames; ++j){
            temp[j] = -1;
            
            for(k = i + 1; k < no_of_pages; ++k){
            if(frames[j] == pages[k]){
            temp[j] = k;
            break;
            }
            }
            }
            
            for(j = 0; j < no_of_frames; ++j){
            if(temp[j] == -1){
            pos = j;
            flag3 = 1;
            break;
            }
            }
            
            if(flag3 ==0){
            max = temp[0];
            pos = 0;
            
            for(j = 1; j < no_of_frames; ++j){
            if(temp[j] > max){
            max = temp[j];
            pos = j;
            }
            }            
}
 frames[pos] = pages[i];
 faults++;
 }
 printf("\n");
 for(j = 0; j < no_of_frames; ++j){
 printf("%d\t", frames[j]);
 }
 }
 printf("\n\nTotal Page Faults = %d", faults);
 return 0;
 }